Ajax Notes : General

Query string = http://website.com/employees.php?firstName=John&lastName=Smith . . . is what comes after the question mark. It appears at the end of a URL and allows for additional information in the response.

Query strings can hold multiple value pairs. In the previous example, the ampersand (&) combined two key-value pairs.

Some characters have special meanings in URLs. Encode (or translate) into a set of symbols that are safe. 

The following link is a good reference: http://www.url-encode-decode.com/

Note: JavaScript and jQuery have methods that can do these types of conversions for you.

GET method is a great way to send information to a server; however, all of the data is sent in the URL, meaning sensitive information will appear in one's browser history. Moreover, only so much data can be transfered in the URL.

POST method puts information in the body of the request, not the URL.

Ajax is limited by a browser's "same-origin policy." Here is a resourceful link: https://developer.mozilla.org/en-US/docs/Web/Security/Same-origin_policy

Four Steps of AJAX

1) Open XMLHttpRequest() object
2) Check onreadystatechange
3) Open request, with GET or POST
4) Send

1) var xhr = new XMLHttpRequest();

2) xhr.onreadystatechange = function () {

};

3) xhr.open('GET', 'sidebar.html');

4) xhr.send();

A more flushed out example . . . 

var xhr = new XMLHttpRequest();
xhr.onreadystatechange = function() {
  if (xhr.readyState === 4) {
    if (xhr.status === 200) {
      var div = document.getElementById('sidebar');
      div.innerHTML = xhr.responseText;
    }
  }
};
xhr.open('GET', 'sidebar.html');
xhr.send();

XMLHttpRequest object has a readyState property that holds 0 - 4. The most important is 4, indicating everything is ready to be sent.
Sometimes, checking for a readyState of 4 is not enough . . . server is down, etc.

A good defense is to also use the status property: 200 = good


AJAX : JSON

JSON = JavaScript Object Notation

JSON consists of arrays and objects.

Two ways to format JSON . . . as an array or an object, or both.

The preferred format is to use objects, as they consist of key-value pairs. This allows for easier identification of data. Keep in mind, JSON requires double quotes (" ") to create valid JSON. (Place double quotes around the key and the value, depending on the value's data type.)


AJAX : Parse

JSON must be parsed before it can be used by the browser.
JSON.parse(xhr.responseText);
This is because JSON comes as a string. If you try to sift through the string data returned, you're going to have a bad time.


AJAX : jQuery

jQuery is the most popular JavaScript library because it makes programming tasks more simple and has great cross-browser support.

To use jQuery, place a script tag in the <head></head> or before the closing </body>. The src attribute of the script tag should point to where the jQuery can be found. Many use the CDN (Content Delivery Network) of either jQuery or Google. Note: If you place the script tag in the head element, jQuery may not work properly because it will load before HTML does. If you plan to leave it there, wrap your code in $(document).ready(function () {
  // Your code . . .
}); The ready() method will fire once the document has fully loaded.

AJAX is used by web developers for gathering JSON data, posting data to a database, and injecting HTML into a webpage. jQuery has shorthand functions to simplify these common tasks. To find a consolidated list of information, head to api.jquery.com. Under the Ajax section, click Shorthand Methods. 

When using one of the shorthand methods, like get(), is it common to see $.get()? Yes! In jQuery, some methods don't require a selector to be used. The dollar sign ($) is a shorthand for the jQuery library itself. Either are correct . . .
jQuery.get();
$.get();
. . . the latter is more popular, as it requires less typing.

The first argument to a get() is the url. The second argument is optional. It's data that is sent to the server. Data is added to the URL as a query string. Finally, a callback function is last.
It is similar to how a regular JavaScript AJAX callback works.
The callback function only runs when the AJAX request is complete and successful.

var url = 'someURL';
var data = {
  firstName : "Some Name",
  lastName : "Some Name"
};

var callback = function (response) {
  // Do something with response
};

$.get(url, data, callback);

In the above get() method, many developers will combine everything into one. In other words . . .

$.get('someURL', {someObject}, function (response) {
  // Do stuff with response
});


AJAX : $.getJSON()

This function works nearly the same as $.get(). It has URL, data, and callback. However, the response passed to the callback function is parsed into a usable JavaScript array or object. Keep in mind, if the server responds with anything other than JSON, the function will fail.

A useful way to cycle through an array or object is jQuery's $.each() method. $.each(arrayOrObject, callback);
The callback function accepts two arguments: index and value.


AJAX : $.post()

It takes three arguments: url, data, and callback.

Data can be a JavaScript object. However, it's common to use data from a form. Note: In the callback, use event.preventDefault();
var url = $(this).attr('action');
var formData = $(this).serialize();

serialize() will extract the data accordingly.


AJAX : $.ajax()

The $.ajax() method looks simple, with two arguments: url and settings.

But it's the ultimate AJAX method in jQuery. To learn more, follow this link: http://api.jquery.com/jquery.ajax/

Why use the $.ajax() method? Well, you can set a "timeout" that waits a number of milliseconds before hearing back from the server. So, you can quit the AJAX request. Moreover, user authentication can be set up, too. But for most common scenarios, the shorthand methods work fine.


AJAX : Errors

AJAX requests fail silently. This may be fine in some instances; however, sometimes you need to let the user know that an error has occurred.

jQuery supports a process known as chaining, where some methods can be added to the end of another method. In the case of errors, the fail method can be tacked on to shorthand AJAX methods except .load() and remote AJAX requests that use JSONP.

Ex: $.get('URL', function (data) {

}).fail(function (jqXHR) {

});


AJAX : API

Sharing information is important on the web. A great way to take advantage of the wealth of information is by using an API, or Application Programming Interface.

There is no one-size-fits-all formula for APIs.

Almost all sites that have an API require an API key. This "key" gives a developer access to their information. The "key" acts like a password, limiting access to what you can do. If you abuse the number of requests, they could revoke your key or charge you a fee.

For example, to look at Flickr's public feed, search the following:
  https://api.flickr.com/services/feeds/photos_public.gne

You may have noticed that the format is XML. With JavaScript, it's easier to work with JSON. So, add this query string to the end: ?format=json

Combined: https://api.flickr.com/services/feeds/photos_public.gne?format=json

To learn more about the various Flickr query string parameters, head to https://www.flickr.com/services/feeds/docs/photos_public/

For security reasons, a browser cannot request data from another server on another domain. Developers came up with a clever way to circumvent this problem, using JSONP (JSON with Padding). It involves adding a script tag that loads JavaScript from another server.

http://api.flickr.com/services/feeds/photos_public.gne?jsoncallback=?

At the end of the above URL, you'll notice a query string of ?jsoncallback=?

It's important because it allows you to bypass security limitations of the same-origin policy.

Here is an example using $.getJSON();

$(document).ready(function() {
  $('button').click(function() {
    $('button').removeClass("selected");
    $(this).addClass("selected");
    // This is the public feed for the url portion of $.getJSON(url, data, callback)
    var flickerAPI = "http://api.flickr.com/services/feeds/photos_public.gne?jsoncallback=?";
    var animal = $(this).text();
    // This is the data portion of $.getJSON(url, data, callback)
    var flickrOptions = {
      tags: animal,
      format: "json"
    };
    // displayPhotos takes one argument--this is also the callback 
      // It represents the JSON data returned by jQuery
       // jQuery parses the data
    function displayPhotos(data) {
      var photoHTML = '<ul>';
      $.each(data.items, function (i, photo) {
        // data.items represents object 
        // i = index; photo = value
      });
    }
    // This is every piece, combined
    $.getJSON(flickerAPI, flickrOptions, displayPhotos);
  });
});


AJAX : Questions

Q. What does an HTTP status code of 200 indicate?
A. Okay. (Done.)

Q. If a variable named xhr contains an XMLHttpRequest object, what "sends" the AJAX request to the server?
A. xhr.send();

Q. How do you create an XHR object?
A. var xhr = new XMLHttpRequest(); Note: The xhr variable can be anything.

Q. What does a status code of 404 mean?
A. File Not Found.

Q. What does JSON stand for?
A. JavaScript Object Notation.

Q. Do JSON properties require double quotes ("")?
A. Yes, the property, and value, requires double quotes.

Q. How can JSON data be formatted?
A. As an array of values, as a JS object containing name-value pairs, and as an array of JS objects.

Q. How to turn JSON string into JS?
A. Use JSON.parse(xhr.responseText);.

Q. How can you tell if value is JSON and not string?
A. Use the typeof operator.

Q. When a server sends JSON-formatted data, what type of data is it sending?
A. String.

Q. In jQuery, what is the load() method used for?
A. The .load() method is a fast way to insert HTML content into an element on a page using AJAX. Note: This method requires an element to be selected, unlike the $.get() method.

Q. What do brackets around arguments mean in documentation?
A.Usually, this indicates that the argument is optional.

Q. What does jQuery's preventDefault() method do?
A. It's used with an event object to prevent the browser from responding normally. For example, it prevents a form from being submitted when a link is clicked.

Q. With post() method, what does serialize() method do?
A. It creates a text string with standard URL-encoded fields in an HTML form.

Q. What is the $.ajax() success property used for?
A. It sets a callback that runs when the browser successfully receives a response from the server.

Q. What two parameters does jQuery's $.ajax() method accept?
A. A URL and a JavaScript object with settings controlling how the AJAX request is made.

Q. The callback function for jQuery's .fail() method receives a jQuery XHR object as a parameter. What property of the jQuery XHR object provides the response's HTTP status code?
A. Status.

Q. Which programming languages can be used to "talk" to third-party APIs?
A. Ruby, PHP, Python, JavaScript, etc.

Q. Why is JSONP important?
A. JSONP is important because it allows developers to bypass the same-origin policy. In other words, same protocol, host, and port.

Q. How can you load jQuery from a CDN (Content Delivery Network) without violating the same-origin policy?
A. The src attribute in HTML is not constrained by the same-origin policy. So a script element can be created that goes to any server, fetches a script, and executes it.--Douglas Crockford
