Python Notes : Booleans

Like most programming languages, Python has two Booleans, True and False. However, there is also the concept of truthy and falsy.

Truthy . . . a bit of data, such as a variable, string, or list, having something in it; same for all numbers that aren't zero

Falsy . . . empty bits of data and the number zero

The bool() method will evaluate to True or False.


Python Notes : General 

To indent Python code, convention is four spaces.

The hash (#) allows for a single-line comment.

Below, the print() method will "print" to the console.

print('Hello, World!')

In Python, try not to put semicolons at end of statements. Ex: day_of_the_week = "Monday" <--- A semicolon does not end this statement.

Don't use spaces or hyphens to create a file. Underscores (this_is_a_file) and camel case (whereEveryWordButTheFirstHasCapitalFirstLetter) are permissible.

Files must end in .py

NameError = trying to use something that doesn't exist

EOL = End of Line

Python variables use alphanumeric characters (A - Z, 0 - 9); don't start with numerical value, though.

Strings = single ('), double ("), or triple (""" or '''); also, backslash (\) is an option to escape a character(s)

End conditionals, loops, and functions with a colon (:). For example, 
if 3 > 2:
    print('Three is greater than two!')


Python Notes : Methods

.format() = method to update string . . . 
    Ex:  print("Hey, what are you doing here, {}?".format('John'))
  
    Add single item to list = use .append()
    Add multiple items to a list = .extend([])
  
    ValueError = unavailable

One can make more floats, ints, and strings by using  multiplication operator (*)
    Ex: 'Hi ' * 5 = 'Hi Hi Hi Hi Hi '

.split() method can be used on string objects 
    Ex: 'How are you doing?'.split() = ['How', 'are', 'you', 'doing?'], an array of substrings

.join() = you must use a string to go from a list to a string
    flavors = ['chocolate', 'vanilla']
    ', '.join(flavors) = chocolate, vanilla

Strings and lists are iterable; they can be "looped."

.index() will return first instance of item you are looking for 

Usually, you should avoid using "is" operator; however, use it to test if a variable is None.

Python does not do type coercion, so triple equals (===) is not needed.


Python Notes: Conditional

if 3 > 2:
    print('True');

# elif and else are other keywords

# not keyword can be used with if; e.g., if not 30 > 40:


Python Notes : Comparison

5 == 5 . . . true . . . because 5 does equal 5
5 != 7 . . . true . . . because 5 does not equal 7

5 > 7 . . . false . . . because 5 is not greater than 7
5 < 7 . . . true . . . because 5 is less than 7

5 is 5 . . . true . . . because 5 equals 5
However, the is operator, above, compares whether values are in the same place in memory. So, it's fine for small bits of data; however, it can be problematic for larger bits of data. On the other hand, the is operator is  handy to test whether a variable has value or is None.


Python Notes : Containment

in 
  
in keyword has two uses: in returns whether or not a value is inside of a container. We can use this to see if, for example, a smaller string is in a bigger string or if a certain item is in a list. Also, in can be used with loops
  
see if one value is in another value
  
    "cheese" in "cheeseshop" == true


Python Notes : Loops

for loop = let us perform an action a certain number of times

    my_list = ['Hello', 'how', 'are', 'you']                                                             
    
    >>> for word in my_list:                                                                                 
        print(word)                                                                                      
                                                                                                          
    Hello                                                                                                    
    how                                                                                                      
    are                                                                                                      
    you      

while loop = run until a condition is false or falsy; let us do something as many times as there are things in another thing 

    start = 10

    while start:
        print(start)
        start -= 1

# Keyword . . . break . . . will "break" from a loop and continue will "continue" on.


Python Notes: Input

.input() method allows a programmer to store a user's input. 

    day_of_week = input("What is day of week is it? ")

    If "Monday" is what the user input, then that will be stored in the day_of_week variable. 


Python Notes : Function

To define a function, use the def keyword . . . 

    def add10(num):
        print(num + 10)

In the preceding example, the add10(num) function only prints the provided num + 10. This is helpful. However, by using the return keyword, one can "return" (store) the value for later use.

So . . . 
    def add10(num):
        return (num + 10)
        
        # The above function has greater flexibility than add10(num) with "print."


How to Handle Exceptions

try is a keyword that allows one to test for an exception.

To "catch" an exception, use the keyword except, specifying the exception to "catch." Now, does one have to specify an except value--no. However, it's bad practice to leave it out.


Python : Import

Python is considered a "batteries included" language because of the built-in tools that come with it. To use these tools, use the import keyword. So, in order to a use a library, type import and then the library you want to use.

  Ex: 

  import random

The above will import the random library. A cool method within the random library is choice(). choice() picks a "random" thing out of an iterable item.

  Ex:
    words = [
        'apple',
        'banana',
        'orange',
        'coconut',
        'strawberry',
        'lime',
        'grapefruit',
        'lemon',
        'kumquat',
        'blueberry',
        'melon'
    ]

    random_word = print(random.choice(words))

    The above code will choose a random word from the words list and print it to the console. Note: Indentation is important in Python. If you plan to test any of the code, make certain to use appropriate spacing. Head to this link to learn more: https://www.python.org/dev/peps/pep-0008/#indentation


Python : Mathematical Operations

>>> a = 12
>>> b = 3
>>> a + b  # addition
15
>>> b - a  # subtraction
-9
>>> a // b  # integer division
4
>>> a / b  # true division
4.0
>>> a * b  # multiplication
36
>>> b ** a  # power operator
531441

>>> 7 / 4  # true division
1.75
>>> 7 // 4  # integer division, flooring returns 1
1
>>> -7 / 4  # true division again, result is opposite of previous
-1.75
>>> -7 // 4  # integer div., result not the opposite of previous
-2


Python : Collections

Two types of collections in Python are string and list. There is one major difference between the two: immutability. Strings are immutable, whereas lists are mutable. 

Lists

There are a few ways to add items to a list: 1) add two lists, 2) multiple a list by itself, 3) extend() or append() or insert()

If you want to add (concatenate), each collection must be a list.

Ex:

list_one = ['I am list one.']
list_two = ['And I am list two.']

list_one += list_two

print(list_one)

# ['I am list one.', 'And I am list two.']

If you use the append method, the item passed in does not have to be a list, unless you require a list.

Ex: list_ex = ['Guess what I am--a list!']

    list_ex.append('Really, cool story.')

    print(list_ex)

    # ['Guess what I am--a list!', 'Really, cool story.']


But what if you require more than one item passed in? Use .extend(['Some text.', 'Some more text'])

The interesting thing about extend() is that you can use it with something that isn't a list as long as the argument is iterable--string, etc.

  Ex:
    a = [1, 2, 3]
    a.extend('abc')
    print(a) # [1, 2, 3, 'a', 'b', 'c']


The last method is insert(). It allows you to insert, as long as you know the index, an item into a list.
  # Note: Like append(), insert() "inserts" whatever you give it. So, if you give it a list, it will insert a list.
  
  Ex: 
    list_items = [1, 2, 3, 4]
    list_items.append(5)

    print(list_items) # [1, 2, 3, 4, 5]


Python : Remove (Item)

Two ways: del and remove()

del keyword uses the item's index to remove it. 
  Ex:
    a = [1, 2, 3, 4]
    del a[0] # This removes the item at index 0, which is 1

remove() method removes an item by its value.
  Ex:
    b = ['happy', 'glad', 'positive']
    b.remove('happy') # This removes 'happy' from the list
    Note: remove() only removes the first find. For example . . .

    new_list = ['happy', 'happy', 'joy', 'joy']
    new_list.remove('happy') # This removes the first happy, at index 0, not the second one

Both of these methods are excellent ways to remove or delete a value; however, neither provides a way to see what has been removed. Enter--pop(). The pop() method removes an item by its index, but instead of throwing the item away, it returns the "popped" item's value. If no index is specified, the last item in a list is "popped."

  Ex: 
    your_list = ['Name_1', 'Name_2', 'Name_3']
    new_list = your_list.pop() # Since no index specified, Name_3 will be popped

    your_list = ['Name_1', 'Name_2', 'Name_3']
    new_list.pop(0) # "Pops" Name_1


Python : Slices

  Ex:
    favorite_things = [1, 2, 3, 4, 5]
    print(favorite_things[0:4]) # Prints [1, 2, 3, 4]

  favorite_things[0:4] # This starts at index 0 and ends (and doesn't include) index 4

Keep in mind that "slices" will always return the data type from which they were sliced. 

Note: Both start and stop are optional. If you leave off start, the slice will start at the beginning of the iterable. If you leave off stop, the slice will continue until the end of the iterable. Also, if you leave out the start and stop options, you will get back what appears to be your list. In fact, it is a copy of your list.

  Ex: messy_list = [3, 5, 1, 4, 2]

  If you use the sort() method on messy_list, the items will be sorted accordingly. However, what would happen if you decided to use messy_list at a later point? It would be sorted. The best solution is to make a copy, using slice.

  clean_list = messy_list[:]
  clean_list.sort() # Produces [1, 2, 3, 4, 5], leaving messy_list as is . . . [3, 5, 1, 4, 2]


Python : Dictionaries
  Ex:
    some_dictionary = {
        'name': 'some_name',
        'age': some_age,
    }

Dictionaries are not sorted, so using an index value to access a value will not work. Instead, use the dictionary's key. (Keys are usually strings or integers.)

  Ex:
    some_dictionary['name'] # 'some_name'

To delete a key-value pair from a dictionary, use the del keyword plus the variable['some_key'].
  Ex:
    some_dict = {'your_name': 'name_value', 'your_age', age_value}
    del some_dict['your_age'] # This will delete the key-value pair of 'your_age' and age_value.

To update a dictionary, you can add a new value by using a key-value pair.

  Ex: 
    some_dict = {'your_name': 'name_value', 'your_age', age_value}

    some_dict['favorite_food'] = 'your_favorite_food'
    # This will add the above key-value pair, favorite_food/your_favorite_food.

The above way of adding to a dictionary works well; however, it can be tedious, as each key-value pair must be added individually. Thankfully, Python offers a cool method: update()

  Ex:
    some_dict = {'your_name': 'name_value', 'your_age': age_value}
    some_dict.update({'job': 'your_job', 'favorite_drink': 'your_favorite_drink'})

    The update() method takes a dictionary as an argument and adds it to some_dict. In other words, after update, some_dict will hold 'your_name': 'name_value', . . . 'favorite_drink': 'your_favorite_drink'. Cool!


Python : Tuples

Lists are great, but sometimes you must ensure your data is safe and unchangeable. Python gives us tuples for this.

Tuples are immutable--they cannot be changed.

To make a tuple, do the following . . .
  Ex:
    my_tuple = (1, 2, 3)
    print(my_tuple) # prints (1, 2, 3)
  Note: Many think the parentheses are what make a tuple; however, if you do the following . . . 

    Ex:
      my_tuple = 1,
      print(my_tuple) # Prints (1,)

    The above code will print (1,). But how was it able to do that without the parentheses? If you guessed the comma after 1, you're right! Keep in mind that (1) would not have made a tuple; it, too, would have needed a comma: (1,).

Although tuples cannot be modified, as they are immutable, a mutable value, such as a list, inside a tuple can be changed.


Python Notes : Helpful Websites

Built-in Functions . . . https://docs.python.org/2/library/functions.html


Python : Questions

Q. In Python, blocks start with a colon. What groups all lines of a particular block together?
A. Indentation.

Q. Does Python automatically add a space after input() prompt?
A. No, it doesn't.

Q. Which loop runs a set number of times?
A. for loop

Q. What keyword makes a function send back information?
A. return

Q. Here is the string "apple". To access the "e," which negative index would you use?
A. -1

Q. What are the three parts of the slice syntax?
A. [start:stop:step]

Q. What method changes several keys and values at once?
A. update() method.

Q. If you have the following dictionary . . . 
    test_dict = {"a": 1, "a": 2, "a": 3}
   . . . which value will be returned from test_dict['a']?
A. 3--because keys are created in order, so the last key-value pair would take ownership.

Q. Do dictionary keys have an order?
A. No, there is not a sorted order.
