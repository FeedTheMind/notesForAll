ES2015 : Variables

let and const 

let keyword provides block scope

block scope can be a loop, if statement, or function

const keyword prevents creating a variable with the same name in the same scope

When to use . . . 

Use let when you need to reassign a variable or scope a variable at the block level.

Use const when you don't want a variables value to change throughout the project. 


ES2015 : String

Template strings . . . 

Use backticks (`) and ${}.
  The backtick character is to the left of the number one.

  Go into Node's REPL (Read, Evaluate, Print, Loop) by typing node in the command line, if Node is installed on your machine. Then . . . 
  
  . . . let x = 10;
      console.log(`The letter x is ${x}.`);
        The letter x is 10.

New Methods to Keep in Mind

  starsWith()

  endsWith()

  includes()


ES2015 : Promises 

Promises were created to ease the burden of nested callback functions.

While promise is waiting for call to finish, it's in a state of "pending." In other words, this pending promise lives on. It can produce a "resolved" state or an error. 

.then() method helps with a promise's fulfillment or error. A common way to see promises . . . 
getJSON('/profile.json').then(renderProfile, displayErr);


Or people will ignore the "rejection" handler, the second argument in the .then() method. 

Ex: 

getJSON('/profile.json')
  .then(renderProfile)
  .then(getFriendsd)
  .catch(displayErr);

The above chaining allows for greater flexibility.

Three states of a promise . . . 1) pending, 2) fulfilled (resolved), 3) rejected


ES2015 : Default Parameters

In ES2015, use the assignment operator (=) after parameter to create default value.

Ex:

function greet(name = 'Name', timeOfDay = 'day') {
  console.log(`Good ${timeOfDay}, ${name}.`);
}

If no arguments or undefined is passed to the function, it will print "Good day, Name." 


ES2015 : Rest Parameters 

Rest parameters make it easier to pass parameters to a function. 

The three periods (...) before the second parameter = how to define rest parameter 

Note: Rest parameter must be the last parameter defined, not first.

function myFunction(name, ...params) {
  console.log(name, params);
}

myFunction("Name", 1, 2, 3); . . . logs . . . Name [1, 2, 3]


ES2015 : Spread Operator 

The spread operator is a useful way to update an array.

const original = ['Chocolate', 'Vanilla'];
const newFlavors = ['Strawberry', 'Mint'];
const inventory = ['Rocky Road', ...original, 'Peanut Butter', ...newFlavors];

console.log(inventory); ===> logs ['Rocky Road', 'Chocolate', 'Vanilla', 'Peanut Butter', Strawberry', 'Mint', ]

Also, it can allow for an array of arguments to a function.

function myFunc(name, iceCream) {
  console.log(`${name} really likes ${iceCream} ice cream.`);
}

let args = ['Name', 'mint'];

myFunc(...args);

logs . . . Name really likes mint ice cream.


ES2015 : Object Property Shorthand can be used with Booleans, numbers, strings, and classes.

function submit(name, comments, rating =  5) {
  let data = {name, comments, rating};

  for (let key in data) {
    console.log(key + ':', data[key]);
  }
}

In the above bit of code, the data object does not have any keys. ES2015 will assign the variable name(s) as the key(s) if no key(s) was (were) provided. Also, notice the third parameter, rating. It has an assignment operator (=) followed by 5. If a "rating" is not provided, it will have a default of 5. Sweet!

The benefits: reduces keystrokes and bugs


ES2015 : For...Of

Note: for...of can be used with string, array, map, and set.

Iterating over a dataset is common; ES2015 gives a helpful statement to iterate with . . . for...of.

The beauty of this loop is that it allows one to "break" from a loop when a condition has been met, improving speed and performance of one's program.

Here's a great link: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...of


ES2015 : Class/Sub-Class

The class keyword is a constructor function in disguise. 

For example, let Student = function (data) {
               this.name = data.name;
               this.age = data.age;  
             }

is equivalent to class Student {
                  constructor(data) {
                    this.name = data.name;
                    this.age = data.age;
                  }
                 }
However, the above class will also log the Student class to the console. In other words, it will log . . . 

  Student {name: 'Name', age: 99}

Function declarations are hoisted and class declarations are not. You first need to declare your class and then access it; otherwise, a ReferenceError is thrown.

More information: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes

With subclasses, use extends keyword; it reference the parent class. After this, use the super function, in the child constructor, super().

In other words, when extending a class you must be sure to call the super() function in the child class constructor before any reference to the instance.

https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/extends


ES2015 : Static Method

Static methods are not accessible through an instance. You can only  call the function by referencing its class.



ES2015 : Misc.

Set . . . must have unique values . . .

Also . . . set has has() method, a great way to see if an element exists

 https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set

Destructuring 

getters versus setters

get has no parameters and must return a value

set has parameters 
